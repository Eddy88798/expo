{"version":3,"file":"useScreenPreload.js","sourceRoot":"","sources":["../../../src/link/preview/useScreenPreload.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ParamListBase,\n  StackNavigationState,\n  type NavigationRoute,\n  type TabNavigationState,\n} from '@react-navigation/native';\nimport isEqual from 'fast-deep-equal';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { getParamsAndNodeFromHref } from './HrefPreview';\nimport type { ReactNavigationState } from '../../global-state/router-store';\nimport { useExpoRouterStore } from '../../global-state/storeContext';\nimport { useRouter } from '../../hooks';\nimport { Href } from '../../types';\n\nexport function useScreenPreload(href: Href) {\n  const router = useRouter();\n  const [navigationKey, setNavigationKey] = useState<string | undefined>();\n  const store = useExpoRouterStore();\n\n  const { params, routeNode } = useMemo(() => getParamsAndNodeFromHref(href), [href]);\n\n  // TODO: check if this can be done with listener to navigation state\n  const updateNavigationKey = useCallback((): void => {\n    const rootState = store.state;\n    const allPreloadedRoutes = rootState ? getAllPreloadedRoutes(rootState) : [];\n\n    const routeKey = allPreloadedRoutes.find((r) => {\n      // TODO: find out if this is correct and necessary solution. This is to cover cases of (.......)/index\n      if (r.params && 'screen' in r.params && 'params' in r.params) {\n        return r.params.screen === routeNode?.route && isEqual(r.params.params, params);\n      }\n      return r.name === routeNode?.route && isEqual(r.params, params);\n    })?.key;\n\n    setNavigationKey(routeKey);\n  }, [params, routeNode]);\n  const preload = useCallback(() => {\n    router.prefetch(href);\n  }, [href]);\n\n  return {\n    preload,\n    updateNavigationKey,\n    navigationKey,\n  };\n}\n\nfunction getAllPreloadedRoutes(\n  state: ReactNavigationState\n): NavigationRoute<ParamListBase, string>[] {\n  const routes: NavigationRoute<ParamListBase, string>[] = [];\n  if (state.type === 'stack') {\n    routes.push(...(state as StackNavigationState<ParamListBase>).preloadedRoutes);\n  }\n  if (state.type === 'tab') {\n    const castedState = state as TabNavigationState<ParamListBase>;\n    routes.push(\n      ...castedState.preloadedRouteKeys\n        .map((key) => castedState.routes.find((route) => route.key === key))\n        .filter((x): x is NavigationRoute<ParamListBase, string> => !!x)\n    );\n  }\n  for (const route of state.routes) {\n    if (route.state) {\n      routes.push(...getAllPreloadedRoutes(route.state));\n    }\n  }\n  return routes;\n}\n"]}